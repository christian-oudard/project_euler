import itertools
from utility import is_prime, primes, up_to

def eval_polynomial(coefficients, x):
    """Evaluates a polynomial at the given point.

    The polynomial is expressed as a sequence of coefficients.

    Example, evaluate x^2 + 2*x + 3 at x=4
    >>> eval_polynomial((1, 2, 3), 4)
    27
    >>> eval_polynomial((2, -6, 2, -1), 3)
    5

    Simple efficiency test.
    >>> n = 100000
    >>> assert eval_polynomial(range(n), 2) == 2 ** n - n - 1
    """
    # Use Horner's method http://en.wikipedia.org/wiki/Horner_scheme
    value = 0
    for c in coefficients:
        value = value * x + c
    return value

def prime_sequence_length(coefficients):
    """
    Find the length of the prime sequence generated by a polynomial.

    >>> prime_sequence_length((1, 1, 41))
    40
    >>> prime_sequence_length((1, -79, 1601))
    80
    """
    for n in itertools.count():
        if not is_prime(eval_polynomial(coefficients, n)):
            return n

# We only need to check prime b, because we evaluate an n = 0, where the value == b.
MAX_NUM = 1000 - 1
max_poly = None
max_length = 0
for a in range(-MAX_NUM, MAX_NUM + 1):
    for b in up_to(MAX_NUM, primes()):
        poly = (1, a, b)
        l = prime_sequence_length(poly)
        if l > max_length:
            max_poly = poly
            max_length = l
_, max_a, max_b = max_poly
print(max_a * max_b)
